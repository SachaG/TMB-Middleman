---

title: Errors
complete: 60
date: 0009/01/01
---

## Errors

<% chapter do %>
#### In this chapter, you will:

- Create a better mechanism for displaying errors and messages
- Learn how to use `Template.rendered` to know when a user has seen an error.
- Create an atmosphere package from our work and share the results with the community!
<% end %>

It's a bit dissatisfying to use the browser's standard `alert()` dialog to warn the user when there's problem with their submission, and it certainly doesn't make for good UX. We can do better. 

Instead, let's build an error reporting mechanism which is much more versatile and does a better job of telling the user what's going on without breaking up their flow.

### Introducing Local Collections

We are going to implement a simple system which keeps track of which errors a user has seen and displays the new ones in a "flash" area of the site. This UX pattern is useful when we want to inform a user that something has happened without taking all of their attention.

What we will implement is similar to Ruby on Rails flash messages, but it's much more subtle because it's implemented client side and knows when a user has seen a message.

To start off with, we create a collection to store our errors in. Given that the errors are only relevant to the current session and don't need to persistent in any way, we are going to do something new, and create a _local collection_. What this means is that the `Errors` collection will only exist in the browser, and will make no attempt to synchronize with the server.

To achieve this, we simply create the error in a client-only file, with the collection name set to `null`. Let's also create a `throwError` method that simply inserts an error into our new local collection:


```js
// Local (client-only) collection
Errors = new Meteor.Collection(null);


```
<%= caption "client/helpers/errors.js" %>

Once we've created the collection, we can add a `throwError` function which we'll call to add errors to that collection. We don't need to worry about `allow` or `deny` or anything like that, as this is a local collection and will not be saved to the Mongo database.

```js
throwError = function(message) {
  Errors.insert({message: message})
}
```
<%= caption "client/helpers/errors.js" %>

The advantage of using a local collection to store the errors is that – like all collections – it's reactive, and we can declaratively display the errors, just like we'd display any other collection data.

### Displaying errors

We are going to display the errors at the top of our main layout:

```html
<head>
  <title>Microscope</title>
</head>
<body>
  <div class="container">
    {{> header}}
    {{> errors}}
    <div id="main" class="row-fluid">
      {{renderPage}}
    </div>
  </div>
</body>
```
<%= caption "client/main.html" %>

Let's now create the `errors` and `error` templates in `errors.html`:

```html
<template name="errors">
  <div class="errors row-fluid">    
    {{#each errors}}
      {{> error}}
    {{/each}}
  </div>
</template>

<template name="error">
  <div class="alert alert-error">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
```
<%= caption "client/views/includes/errors.html" %>

<% note do %>

### 2 Templates 1 File

You'll notice we're putting two templates in a single file. Up to now we've tried to adhere to a 1 file = 1 template convention, but putting all our templates in a single file would work just as well (although it would probably make for a very confusing `main.html`!).

In this case, since both error templates are fairly short, we'll make an exception and stick them in the same file to make our repo a bit cleaner. 

<% end %>

We just need to wire up our template helper, and we'll be good to go!

```js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});
```
<%= caption "client/views/includes/errors.js" %>

<%= commit "9-1", "Basic error reporting." %>

### Creating errors

Well, it's all very well displaying errors, but we need to create some before we'll see anything. The natural place to display errors is if there is a problem creating posts. We'll check if there's an error in our post creation callback, and if there is, we'll display it.

Additionally, if we get the `302` error that we use to indicate that a post with the same URL already exists, we'll redirect the user to the existing post (this is why back in chapter 7 we passed that post's ID as the third `details` argument of our `Error` class). 

```js
Template.postSubmit.events({
  'submit form': function(event) {
    event.preventDefault();
    
    var post = {
      url: $(event.target).find('[name=url]').val(),
      title: $(event.target).find('[name=title]').val(),
      message: $(event.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error) {
        // display the error to the user
        throwError(error.reason);
        
        // if the error is that the post already exists, take us there
        if (error.error === 302)
          Meteor.Router.to('postPage', error.details)
      } else {
        Meteor.Router.to('postPage', id);
      }
    });
  }
});
```
<%= caption "client/views/posts/post_submit.js" %>

<%= commit "9-2", "Actually use the error reporting." %>

Give it a try; try creating a post and entering the URL `http://meteor.com` -- as this URL is already attached to a post in the fixtures, you should see:

<%= screenshot "9-1", "Triggering an error" %>

### Clearing Errors

Now you might have tried clicking the error's close button. If you did, you would see the error go away, only to come back as soon as you loaded up another page. What's going on?

Well, that close button triggers Twitter Bootstrap's embedded JavaScript. It has nothing to do with Meteor! So what's happening is that Bootstrap is removing the error `<div>` from the DOM, but of course not from the Meteor collection, meaning the error will of course pop right back up as soon as Meteor re-renders the page. 

So unless we want errors relentlessly coming back from the dead to remind users of past mistakes and slowly driving them to insanity, we better add a way to remove errors from the collection, too.  

But first, we'll modify the `throwError` method to include a `seen` property. This will be useful later on to keep track of whether an error has been actually seen by the user. 

Once that's done, let's code up a simple `clearErrors` method that clears those "seen" errors:

```js
// Local (client-only) collection
Errors = new Meteor.Collection(null);

throwError = function(message) {
  Errors.insert({message: message, seen: false})
}

clearErrors = function() {
  Errors.remove({seen: true});
}
```
<%= caption "client/helpers/errors.js" %>

Now we'll simply clear errors in the router, so that going to another page makes these annoying errors vanish forever:

```js
Meteor.Router.filters({
  'requireLogin': function(page) {
    if (Meteor.user())
      return page;
    else if (Meteor.loggingIn())
      return 'loading';
    else
      return 'accessDenied';
  },
  'clearErrors': function(page) {
    clearErrors();
    return page;
  }
});

Meteor.Router.filter('requireLogin', {only: 'postSubmit'});
Meteor.Router.filter('clearErrors');
```
<%= caption "client/helpers/router.js" %>

Things now mostly work like we want them to, but there's still one edge case we need to take care of. When we throw up an error and then redirect the user somewhere else (as we do when they try to post a duplicate link), the redirection happens instantly. This means that the user never has the chance to actually see the error before it's cleared. 

This is where our `seen` property will come in handy. We need to ensure that it's only set to `true` if the user has actually seen the error. 

To achieve this, we'll use `Meteor.defer()`. This function tells Meteor to execute its callback "just after" whatever's going on now. If it helps, you can consider that `defer()` is like telling the browser to wait 1 millisecond before proceeding. 

What we're doing is telling Meteor to set `seen` to `true` 1 millisecond after the `errors` template has been rendered. But remember how we said that redirection happens instantly? This means that the redirection will kick in before the `defer` callback which will never be executed.

This is exactly what we want: if it's not executed our error will not be marked as `seen`, which means it won't be cleared, which means it'll appear on the page our user is redirect to just like we wanted!

```js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});

Template.error.rendered = function() {
  var error = this.data;
  Meteor.defer(function() {
    Errors.update(error._id, {$set: {seen: true}});
  });
};
```
<%= caption "client/views/includes/errors.js" %>

<%= commit "9-3", "Monitor which errors have been seen, and clear on routing." %>

Whew! That was a lot of work for something users will hopefully never see!