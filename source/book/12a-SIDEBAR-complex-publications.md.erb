---
title: Advanced Subscriptions
complete: 90
date: 0012/01/02
number: s9
sidebar: true
---


By now you should have a good grasp of how publications and subscriptions interact. So let's drop the training wheels and examine a few more advanced scenarios.
 
### Publishing a Collection Twice

In an earlier sidebar, we saw some of the more common publication and subscription patterns, and we learned how the `_publishCursor` function made them very easy to implement for our own sites.

Well, firstly we should remember exactly what `publishCursor` does for us exactly. It takes call the documents that match a given cursor, and pushes them down into the client side collection *of the same name* as where they came from.
However the name of the _publication_ is in no way involved.

<%= diagram "doublecollection", "Publishing a collection twice", "pull-right" %>

In fact, our latest publication is called `'singlePost'`, whereas the relevant collection is `'posts'`. Why is this important? It means we can have _more than one publication_ linking the client and server versions of any collection.

We've already seen that happen in our project, when we want to publish a paginated subset of all the posts as well as a single, important post. Another common use case is to publish an *overview* of a large set of documents, as well as the full details of a single post:

```js
Meteor.publish('allPosts', function() {
  return Posts.find({}, {fields: {title: true, author: true}});
});

Meteor.publish('postDetail', function(postId) {
  return Posts.find(postId);
});
```

Now, when the client subscribes to those two publications (using `autorun` to ensure that the right `postId` is being sent to the `postDetail` subscription), its `'posts'` collection gets filled out from two sources -- a list of titles and author's names from the first subscription, and the full details of a post from the second.

What happens to the overlapping post, which is sent by both subscriptions? Meteor takes care of merging the fields sent, which ends up working as we might expect. 

This is great, because now when we render the list of post summaries, we are dealing with data objects that have just enough data for us to show what we need. However, when we render out the page for a single post, we have everything we need to show it. Of course, we need to take care on the client to not expect all fields to be available on all post in this case---this is a common gotcha!

### Multiple Collections in a Single Subscription

Although many developers are familiar with developing against NoSQL databases, many of those who come to Meteor from more traditional frameworks are more used to *relational* databases. On the other hand, with Mongo we are told to *denormalize*, to *embed* and not to join. 

<%= diagram "multiplecollections", "Two collections in one subscription", "pull-right" %>

Let's talk about a concrete example. We've added comments to our posts. So far, we've gotten away with just publishing the comments on the single post that the user is looking at. However, suppose we wanted to show comments on all the posts on the front page, which changes as we paginate through them. This difficulty is a good reason to embed comments in posts after all (and is the reason we denormalized comment counts).

There are many considerations as to which is the best approach, and to some degree it is application specific, but there's a trick involving subscriptions that makes the separate collection much more compelling in Meteor. Suppose along with our list of post titles, we want to subscribe to a list of the top 2 comments for each post. 

This would be difficult to have a independent publication for, especially if the list of posts was limited in some way (say the 10 most recent). We'd have to write a publication that looked something like:

```js
Meteor.publish('topComments', function(topPostIds) {
  return Comments.find({postId: topPostIds});
});
```

Which would be a problem as the publication would have to get torn down and re-established each time the list of `topPostIds` changed. 

However, there is a way around this. We just use the fact that we can not only have more than one publication per collection, but we can also have more than one collection per publication. Here's how we could solve this case:

```js
Meteor.publish('topPosts', function(limit) {
  var sub = this, commentHandles = [], postHandle = nil;
  
  // send over the top two comments attached to a single post
  function publishPostComments(post) {
    var comments = Comments.find({postId: post._id}, {limit: 2});
    commentHandles[post._id] = comments.observe({
      added: function(id, comment) {
        sub.added('comments', id, comment);
      }
      // etc, see _publishCursor for hints
    });
    
    postHandle = Posts.find({}, {limit: limit}).observe({
      added: function(id, post) {
        publishPostComments(post);
        sub.added('posts', id, post);
      },
      removed: function(id) {
        // stop observing changes on the post's comments
        commentHandles[id] && commentHandles[id].stop();
        // delete the post
        sub.removed('posts', id, _.keys(oldPost));
      }
      // etc, see _publishCursor for hints
    });
    
    sub.ready();
    
    // make sure we clean everything up
    sub.onStop(function() {
      postsHandle.stop();
      commentsHandle.stop();
    });
  }
});
```

So now, every time we publish a post, we automatically publish the top two comments attached to it. All with a single subscription call. Magic!

This approach is made even easier by the `publish-with-relations` package on atmosphere, which sets up code like the above for us.

### Linking different collections

So what else can our new found knowledge of the flexibility of subscriptions give us? Well, if we don't use `_publishCursor`, we don't need to follow the constraint that the source collection (on the server) need have the same name as the target collection (on the client).

<%= diagram "linkedcollections", "One collection for two subscriptions", "pull-right" %>

Why would we ever want to do this? One reason is *Single Table Inheritance*. Suppose that we wanted to reference various types of objects from our posts, each of which stored common fields, but differed slightly in content. Most likely, we'd just store such objects embedded in the post, but assuming we didn't, it might make sense to store them all in a single `'resources'` collection, using a `type` attribute to indicate which sort of object they are. (For our example, let's say our types are `video` and `image`).

Then although we would have a single `Resources` collection on the server, we could achieve `Videos` and `Images` collections on the client with the following bit of magic:

```js
  Meteor.publish(function('videos') {
    var sub = this;
    
    var handle = Resources.find({type: 'video'}).observe({
      added: function(id, video) {
        sub.added('videos', id, video);
      }
      // &c for other events, see _publishCursor for hints.
    })
    
    // mark complete, clean up when stopped
    sub.ready();
    
    sub.onStop(function() { handle.stop(); });
  });
```


So basically we are doing what `_publishCursor` does, but rather than publishing from `'resources'` to `'resources'`, instead we are publishing from `'resources'` to `'videos'`. 

We're not sure if this trick is really a very good idea; but it's good to know what's possible in order to use Meteor to its fullest.
