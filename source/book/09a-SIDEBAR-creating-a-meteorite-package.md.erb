---
title: SIDEBAR - Creating a Meteorite Package
complete: 100
date: 0009/01/02
---

## SIDEBAR: Creating a Meteorite package

We've built a re-usable pattern with our errors work, so why not package it up into a smart package and share it with the rest of the Meteor community?

It's easier than you think!

### Getting set up

First we need to create some structure for our package to reside in.

We put the package in the `packages/errors/` directory of our app to create a custom package that's automatically used.

Next, we'll create the `package.js`, the file that's used to inform Meteor of how the package will be used.

```js
Package.describe({
  summary: "A pattern to display application errors to the user"
});

Package.on_use(function (api, where) {
  api.use(['minimongo', 'mongo-livedata', 'templating'], 'client');

  api.add_files(['errors.js', 'errors_list.html', 'errors_list.js'], 'client');
});
```
<%= caption "packages/errors/package.js" %>

We've added three files to the package, which correspond to the three files that we'll create in the package directory, which are more or less pulled directly from Microscope, modulo some proper namespacing, and a slightly cleaner API:

```js
// Local (client-only) collection
Meteor.errors = new Meteor.Collection(null);

Meteor.Errors = {
  throw: function(message) {
    Meteor.errors.insert({message: message, seen: false})
  },
  clear: function() {
    Meteor.errors.remove({seen: true});
  }  
}
```
<%= caption "packages/errors/errors.js" %>

```html
<template name="meteorErrors">
  {{#each errors}}
    {{> meteorError}}
  {{/each}}
</template>

<template name="meteorError">
  <div class="alert alert-error">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
```
<%= caption "packages/errors/errors_list.html" %>

```js
Template.meteorErrors.helpers({
  errors: function() {
    return Meteor.errors.find();
  }
});

Template.meteorError.rendered = function() {
  var error = this.data;
  Meteor.defer(function() {
    Meteor.errors.update(error._id, {$set: {seen: true}});
  });
};
```
<%= caption "packages/errors/errors_list.js" %>



### Testing the package out with Microscope

Let's make sure that our changed code works, and test things locally with Microscope. As we saw earlier, the package is automatically linked, so the main thing is to delete the existing files (that we've made redundant with the new package):

```bash
$ rm client/helpers/errors.js
$ rm client/views/includes/errors.html
$ rm client/views/includes/errors.js
```
<%= caption "removing old files on the bash console" %>

The other thing we need to do is make some minor updates to use the correct API:

```js
'clearErrors': function(page) {
  Meteor.Errors.clear();
  return page;
}
```
<%= caption "client/helpers/router.js" %>

```html
  {{> header}}
  {{> meteorErrors}}
```
<%= caption "client/main.html" %>

```js
Meteor.call('post', post, function(error, id) {
  if (error) {
    // display the error to the user
    Meteor.Errors.throw(error.reason);

```
<%= caption "client/views/posts/post_submit.js" %>

```js
Posts.update(currentPostId, {$set: postProperties}, function(error) {
  if (error) {
    // display the error to the user
    Meteor.Errors.throw(error.reason);
```
<%= caption "client/views/posts/post_edit.js" %>

<%= commit "s7-1", "Created basic errors package and linked it in." %>

Once we've made those changes, we should see our original behaviour (it's always best to test it out!)

### Writing tests

The first step in developing a package is testing it against an application, but the next is to write an actual test suite that properly tests the package's behaviour. Meteor itself comes with a built in package tester, so it's easy to run such tests, and maintain piece of mind when sharing our package with others.

Then we'll create a test file that uses tiny test to run some tests against the errors codebase:

```js
Tinytest.add("Errors collection works", function(test) {
  test.equal(Meteor.errors.find({}).count(), 0);
  
  Meteor.Errors.throw('A new error!');
  test.equal(Meteor.errors.find({}).count(), 1);
  
  Meteor.errors.remove({});
});

Tinytest.addAsync("Errors template works", function(test, done) {  
  Meteor.Errors.throw('A new error!');
  test.equal(Meteor.errors.find({seen: false}).count(), 1);
  
  // render the template
  OnscreenDiv(Spark.render(function() {
    return Template.meteorErrors();
  }));
  
  // wait a few milliseconds
  Meteor.setTimeout(function() {
    test.equal(Meteor.errors.find({seen: false}).count(), 0);
    test.equal(Meteor.errors.find({}).count(), 1);
    Meteor.Errors.clear();
    
    test.equal(Meteor.errors.find({seen: true}).count(), 0);
    done();
  }, 500);
});
```
<%= caption "packages/errors/errors_tests.js" %>


In these tests we're checking the basic `Meteor.Errors` functions work, as well as double checking that the template `rendered` code is still functioning.

We need to tell Meteor how to run the tests in `package.js`:

```js
Package.on_test(function(api) {
  api.use('errors', 'client');
  api.use(['tinytest', 'test-helpers'], 'client');  
  
  api.add_files('errors_tests.js', 'client');
});
```
<%= caption "package/errors/package.js" %>

<%= commit "s7-2", "Added tests to the package." %>

Then we can run the tests with:

```bash
$ mrt test-packages packages/errors/
```
<%= caption 'Terminal' %>

<%= screenshot "s7-1", "Passing all tests" %>

### Releasing the package

Finally, we want to put the package on Atmosphere so we can proudly display it to the world!

First, we need to add a `smart.json`, to tell Meteorite about the package so we can run `mrt` against it (and later so we can release it):

```json
{
  "name": "errors",
  "description": "A pattern to display application errors to the user",
  "homepage": "https://github.com/tmeasday/meteor-errors",
  "author": "Tom Coleman <tom@thesnail.org>",
  "version": "0.1.0",
  "git": "https://github.com/tmeasday/meteor-errors.git",
  "packages": {
  }
}
```
<%= caption "smart.json" %>

<%= commit "s7-3", "Added a smart.json" %>

We put in some basic metadata about the package, and what it's all about, including the git location where we are going to host it (on github), and an initial version that we'll start at. If our package was relying on other Atmosphere packages, we could use a `"packages"` section to outline how.

Once that's in place, releasing is easy! First we just need to push the code to github at the location we specified (that's how Atmosphere distributes packages, by sharing github links), and then we can use the `mrt release` command to finish the job:

```bash
$ git push origin master
$ mrt release .
Done!
```
<%= caption "Terminal" %>

This step won't work for you if you are following along, as there can only be one of any particular package name. In the future, Atmosphere will be namespaced by author, so you can expect this to change!

Now that it's released, assuming that we've are satisifed with the functionality and don't need to change it further (if we did, we could use a git submodule), we can delete it from the project, and add it directly using Meteorite:

```bash
$ rm -r packages/
$ mrt add errors
```
<%= caption "Terminal" %>

<%= commit "s7-4", "Removed package from development tree." %>

Now we should see Meteorite download our package for the very first time. Pretty awesome!