---

title: Reactivity
complete: 90
date: 0004/01/03
number: s4
sidebar: true
---


If collections are Meteor's core feature, then *reactivity* is the shell that makes that core useful. Take a moment to think it through--our collections are a source of constantly changing data, but how do we display that data on the screen?

One way would be by using `.observe()`, a method on a cursor which fires callbacks as documents matching that cursor change. We *could* then imperatively make changes to the DOM (the rendered HTML of our webpage). For instance, we could write code that goes much like this:

```js
Posts.find().observe({
  added: function(post) {
    $('ul').append('<li>' + post.title + '</li>');
  }
});
```

However, such code is going to get pretty complex pretty fast. In fact, every time we such use a dynamic attribute of our post (or a combination of such attributes) in our template, we're going to have to hook up such a observer and remember to keep it up to date. 

Meteor provides us with a better way; reactivity, which is at it's core a **declarative** approach. Rather than saying "when X changes, change Y in this way", we instead say "Y is generated from X in this way", which tells the system that when X changes, it can go ahead and change Y in a sensible way. 

This is a powerful concept, because as a realtime system is a system with many inputs that are changing at unpredictable times. Of course we could manage with an event based system where the developer is responsible for determining exactly what needs to change as the result of each event. It would quickly become very complicated however; imagine a field that depends on three or four different inputs, each of which could change at any time. Or, alternatively, when an input changes, how would you keep track of what depends on it, and what changes you need to make?

A dependency system is built to do this difficult job for you.


### Dependency tracking in Meteor

The way that dependency tracking in Meteor works is disarmingly simple.

Whenever you are generating some data that takes reactive inputs, you set up a `Computation`. (In fact you usually don't do this explicitly, as Meteor sets up a special Computation for each Template that it renders). A computation wraps up some code that executes.

When that code executes, it may call a *reactive function*. Such a function is simply a normal function that tracks all the computations that have called it in a simple list (which is called a `Dependency`). When a reactive function wants to indicate that its value has changed, it simply calls `dependency.changed()` and each Computation is *invalidated* (which basically means told that it's inputs have changed). 

Most computations are setup to simply re-evaluate when they are invalidated (and this is what happens to the template computations). There's a simple way to create such a computation; the `Meteor.autorun` function:

```js
  Meteor.autorun(function() {
    console.log('Session val is: ' + Session.get('a-session-value'));
  });
```

Here we've setup a very simple computation that simply logs a session variable. However, remember that the session is a *reactive data source*, so in calling `Session.get`, we've added the computation to the Session's list of dependencies on the variable `a-session-value`. What this means is if the value of `a-session-value` changes, the session will tell our computation it's invalidated, and it'll auto-re-run itself:

```js
Session.set('a-session-value', 'awesome new session value');
```

All in all, the net result of this is that we can write code that uses reactive data in a very natural way, knowing that behind the scenes, the dependency system will take care of re-running it at just the right times.

### Comparing Deps to AngularJS

Angular is a client-side only reactive rendering library, developed by the good folks at Google. It's illustrative to compare Meteor's approach to dependency tracking to Angular's, as the approaches are quite different and that difference is quite interesting.

We've seen that Meteor's model uses blocks of code, called computations, that are tracked by special 'reactive' functions that invalidate the computations when appropriate. Computations can do what they like when they are invalidated, but normally simply re-run. In this way, a fine level of control over reactivity is acheived.

In Angular, reactivity is mediated by the `scope` object. A scope can be thought of as plain JavaScript object with a couple of special methods. 

When you want to reactively depend on a value in a scope, you call `scope.$watch`, providing the expression that you are interested in (i.e. which parts of the scope you care about), and a listener function that will run every time that expression changes. So you explicitly state exactly what you want to do every time the value of the expression changes.

Of course, when you are using Angular, you don't often call `$watch` explicitly, as `ng-model` directives and `{{expressions}}` set up watches automatically that take care of re-rendering on changes.

Then, when such a reactive value has changed, `scope.$apply` must be called. This re-evaluates every watcher of the scope, but only calls the listener function of any watcher who's expression's value has *changed*. So `scope.$apply` is similar to `dependency.changed`, except that it acts at the level of the scope, rather than giving you the control to say precisely which listeners should be re-evaluated. However, this slight lack of control gives Angular the ability to be very smart and efficient in how it can determine precisely which listeners need to be re-evaluated.














