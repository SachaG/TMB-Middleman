---
title: Denormalization
complete: 90
date: 0010/01/02
number: s8
sidebar: true
---


*Denormalizing* data means not storing that data in a "normal form", in other words having multiple copies of the same piece of data hanging about. 

In the last chapter, we denormalized the count of the number of comments into the post object in order to avoid having to load all the comments all the time. In a data modelling sense, this is redundant, as (if we weren't considering performance), we could instead just count the correct set of comments at any time to find that value out.

Denormalizing often means extra work involved for the developer. In our example, every time we add or remove a comment we'll need to remember to update the relevant post to ensure the field stays consistent. This is why relational database in particular (such as MySQL) frown upon this approach.

However, the normal approach also has its drawbacks: without a `commentsCount` property, we'd need to continue doing what we were doing before and send _all_ comments down the wire at all times. When we denormalize, we no longer need to do that.

<% note do %>

It *would* be possible to create a special publication that only sends down the comment counts that we are interested in (i.e. comment counts of posts that we can currently see, via aggregate queries on the server), but it's worth considering if the complexity of such publication code would not outweigh the difficulties created by denormalizing.

<% end %>

Of course such considerations are very application specific: if you are writing code where data integrity is of paramount importance then the seriousness of potential problems caused by inconsistencies in the data probably means that your highest priority is avoiding such problems, rather than any performance gains.

### Embedding documents or using multiple collections

If you are experienced with Mongo, you might have been surprised that we created a second collection just for comments. Why not just embed the comments in a list within the post document?

Well, it turns out that many of the tools Meteor gives us work a lot better when operating at the collection level. For instance:

1. The `{{#each}}` helper is very efficient when iterating over a cursor (the result of `collection.find()`). The same is not true when it iterates over an array of objects within a larger document.
2. `allow` and `deny` operate at the document level, and thus make it easy to ensure that any modifications of individual comments are correct in a way that would be more complex if we operated at a post level.
3. DDP operates at the level of attributes of a document--this would mean if `comments` was a property of a `post`, every time a comment was created on a post, the server would send the entire updated comment list of that post out to each connected client.
4. Publications and subscriptions are a lot easier to control at the level of documents--so for instance if we wanted to paginate comments on a post, we would find it difficult to do so unless comments were in their own collection.

The reason that Mongo suggests embedding documents is to reduce the number of expensive queries to fetch documents. However, this is less of an issue when we remember Meteor's architecture -- most of the time we are querying comments on the *client*, where database access is essentially free.

Of course, there's an added complexity in publishing documents (as we mentioned above)-- for instance we've see that publishing only the comments of the limited set of posts the user is looking at can be difficult. However there *are* ways to do it--the `publish-with-relations` atmosphere package in particular is very helpful if you want to take this approach.

If, however you are doing a lot of queries on the server, or your publications become too complex, it may be better to embed comments or other sub documents. Certainly, there's no wrong way to do it, but it's good to go into it with all the information.

