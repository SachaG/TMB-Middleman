---

title: Adding Users
complete: 80
date: 0006/01/01
---

{% div chapter %}
#### In this chapter, you will:

- Learn about user accounts in Meteor
- Add all the authentication we'll need for Miniscope
- Use the built-in `accounts-ui` package to get an instant user interface
{% enddiv %}

## User interaction: accounts, comments, more

So far, we've managed to create and display some static fixture data in a sensible fashion and wire it together into a simple prototype. We've even seen how our UI is responsive to changes in the data, and inserted or changed data appears immediately. But, still, our site is hamstrung by the fact that we can't enter data--in fact, we don't even have users yet! 

Let's change that.

### Accounts: users made simple

In most web frameworks, adding user accounts is a familiar drag. Sure, you have to do it on almost every project, but it's never as easy as it could be, and as soon as you have to deal with OAuth or other 3rd party authentication schemes, things tend to get ugly fast.

Luckily, Meteor has you covered. Thanks to the way Meteor packages can contribute code both on the server and client side, logically (in the JavaScript) and presentationally (in the HTML and CSS), we can get an accounts system almost for free. 

Let's get started. In MiniScope, we'll just use Meteor's built in UI for accounts. On the command line, we type:

```bash
mrt add accounts-ui
mrt add accounts-password
```

Those two commands make the special accounts templates available to us; we can include them in our site using the `{%raw%}{{loginButtons}}{%endraw%}` helper. 

We'll add the buttons to our header. And since that header is starting to grow larger, let's give it more room in its own template. We're also using some extra markup and Bootstrap classes to make sure everything looks nice:

{% handlebars %}
<head>
  <title>Miniscope</title>
</head>
<body>
  <div class="container">
    {{> header}}
    <div id="main" class="row-fluid">
      {{renderPage}}
    </div>
  </div>
</body>
{% endhandlebars %}
{% caption client/main.html %}

{% handlebars %}
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="/">Miniscope</a>
      <ul class="nav">
        <li><a href="/">New</a></li>
      </ul>
      <ul class="nav pull-right">
        <li>{{loginButtons}}</li>
      </ul>
    </div>
  </header>
</template>
{% endhandlebars %}
{% caption client/includes/header.html %}

Now, when we browse to our app, we see the accounts login buttons in the top right hand corner of our site.

>> SS

We can use these to sign up, login, request a change of password, and everything else that a simple site needs for password based accounts.

For MiniScope, we just want users to login via a username (which we can display throughout the application), so we should just let people sign in via one:

{% highlight js %}
Accounts.ui.config({
  passwordSignupFields: 'USERNAME_ONLY'
});
```
{% caption client/telescope.js %}


### What does that give us?

If you sign up for an account, the "Sign in" button changes to show your username. So, clearly, a user account has been created for you. Where is that data? 

By adding the `accounts` package, Meteor has created a special new collection for us. We can access that collection at `Meteor.users()`. Try it now; in the console, type:

{% highlight js %}
Meteor.users().findOne();
```
{% caption browser console %}

The console should return an object representing your user object; if you take a look, you can see that your email is in there, as well as an `_id` that uniquely identifies you.

You can also find the single user that is logged in with `Meteor.user()`;

Now, try logging out, and signing up and logging in with a second username. `Meteor.user()` should now return that a different user. Now, if we run:

{% highlight js %}
Meteor.users().find().count();
```
{% caption browser console %}


The console returns 1. Hold on, shouldn't that be 2? What's happened? Has the first user been deleted? If you try logging in as that user again, you'll see that's not the case.

Let's be sure, and check in the canonical data-store, the mongo database. We'll log into mongo and check:

```bash
> db.users.count()
```
{% caption mongo console %}

No, there are definitely two users. Why can we only see one in the browser?

### A mystery publication!

If you think back to Chapter 4, you might remember that by turning off `autopublish`, we stopped collections from automatically sending all the data from the server into each connected client's local version of the collection.  We needed to create a publication and subscripton pair to channel the data across. 

That explains why one user can't see another's account details--we never set up any kind of user publication! So why can we see our own data then?

The answer is that the accounts package actually does "auto"-publish the currently logged in user's basic account details no matter what. If it didn't, then user could never log in to the site unless the developer remembered to do so. I can't imagine a situation where you would want to do that.

There are two interesting things about this publication though. Let's take a closer look.

Firstly, clearly the publication is only publishing one user object per-logged in user (and none when you are not logged in). That's a neat trick.

Secondly, the fields are different. In Mongo, a user has a lot of data in it:
```bash
> db.users.findOne()
```
{% caption mongo console %}

Whereas in the browser, the user object is much more pared down:
{% highlight js %}
Meteor.users.findOne();
```
{% caption browser console %}

So we can see in this example how a local collection is a *secure subset* of the real database. The logged in user only sees _exactly how much they need to see_ of the real dataset to get the job (signing-in in this case) done. This is a useful pattern to learn from.