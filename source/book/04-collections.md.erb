---

title: Collections
complete: 100
date: 0004/01/01
---

## Realtime data with Collections


<% chapter do %>
#### In this chapter, you will:

- Learn about Meteor's core feature: realtime collections
- Understand how Meteor's data synchronization works
- Integrate collections into Miniscope to our templates
- Turn our basic prototype into a functioning realtime application!
<% end %>

### Introduction to Collections

In chapter one, we spoke about the core feature of Meteor, the automatic synchronisation of data between client and server. In this chapter, we'll take a closer look at how that works, and observe the operation of the key piece of technology that enables this, the `Meteor.Collection`.

We are building a social news app, so the first thing we want to do is make a list of links that people have posted. We'll call such a thing a "post".

We need to store these posts somewhere. As of this writing, Meteor comes bundled with a Mongo database, which runs on your server and is your *persistent* store of data.

So, although a user's browser may contain some kind of state (for instance which page they are on, or the comment they are currently typing), the server, and specifically Mongo, contains the permanent, canonical data source. By *canonical*, we mean that it is the same for all users--each user might be on a different page, but the master list of posts is the same for all of them.

The place that this data lives in Meteor is the **Collection**. A collection is a special store of data that (along with publications) takes care of the job of synchronising data to and from each connected user's browser, and into the Mongo database. In *realtime*. Let's see how.

Seeing as we want our posts to be permanent and shared between users, we start by creating a Posts collection.

If you haven't done so already, create a `collections` folder at the root of your app, and a `posts.js` file inside that:

```js
Posts = new Meteor.Collection('posts');
```
<%= caption "collections/posts.js" %>

<%= commit "4-1", "Added a posts collection" %>

Code inside folders that are not `client/` or `server/` which will run in *both* contexts. So the `Posts` collection is avaliable to both client and server. However, what the collection does on either side is very different.

On the server, the collection has the job of talking to the Mongo database, and reading and writing any changes. In this sense, it can be compared to a standard database library. On the client however, the collection is a *secure* copy of a *subset* of the real, canonical collection. The client-side collection is constantly and (mostly) transparently kept up to date with the that subset in realtime.

### What a collection does on the server

On the server, the collection acts as an API into to your Mongo database. So in your server-side code, you can write Mongo commands like `Posts.insert()` or `Posts.update`, and they will, as you might expect, make changes to the `posts` collection stored inside the Mongo database.

You can take a look inside the Mongo database easily enough. Open up a second terminal window (while `mrt` is still running in your first), go to your app's directory, and run the command `mrt Mongo`. This will initiate a Mongo shell, into which you can type standard Mongo commands:

```js
> db.posts.insert({title: "A new post"});

> db.posts.find();
{title: "A new post", _id: 'xxx'};
```
<% caption "the Mongo console" %>

Mongo's syntax is familiar, as it uses a JavaScript interface. We won't be doing any data manipulation in the Mongo console, but we might take a peek inside from time to time just to make sure what's in there.

### What a collection does on the client

Collections get more interesting client-side. When you declare `Posts = new Meteor.Collection('posts');` on the client, what you are creating is a _local, in-browser cache_ of the real Mongo collection. When we say cache here, we mean in the sense that it contains a *subset* of the data, and that it's very *quick* to access data.

It's important to understand this point as it's fundamental to the way Meteor works. So to be clear: in general, a client side collection consists of some portion of all the documents stored in the Mongo collection. Secondly, those documents are stored *in browser memory*, which means that accessing them is basically instant.

There are no slow trips to the server or the database to fetch the data when you call `posts.find()` on the client, as the data is already pre-loaded.

<% note do %>
### Collections vs Caches

The comparison of a collection to a cache is useful to illustrate how fast it is to access, but don't take the analogy too far!

Where a client-side collection differs from a cache is in the fact that the data loaded into it is fixed and decided by your application. It can be changed as a user browses around, but if you try to find a document that hasn't been sent to the browser there is no "cache-miss", or subsequent server access. It just appears as if the document *does not exist*.

You explicitly decide, through publications, which data will be loaded into each collection. We'll learn more about this mechanism soon.
<% end %>

### How they communicate

The key piece of all this is how the client-side collection sychronizes its data with the server side collection of the same name (`'posts'` in our case).

Rather than explaining this in detail, let's just watch it happen.

Start by opening up two browser windows, and accessing the console in each one. Additionally, open up the Mongo console on the command line. At this point, we should see the single document we created earlier in all three contexts.

```js
> db.posts.find();
{title: "A new post", _id: 'xxx'};
```
<%= caption "Mongo console" %>

```js
❯ Posts.findOne();
{title: "A new post", _id: 'xxx'};
```
<%= caption "Browser console" %>

Now, let's create a new post--in one of our browser windows, run an insert command:

```js
❯ Posts.find().count();
1
❯ Posts.insert({title: "A second post"});
'xxx'
❯ Posts.find().count();
2
```
<%= caption "Browser console" %>

Not very surprisingly, the post made it into the local collection. Now let's check Mongo:

```js
❯ db.posts.find();
{title: "A new post", _id: 'xxx'};
{title: "A second post", _id: 'xxx'};
```
<%= caption "Mongo console" %>

So the post made it all the way back to the Mongo database, without us writing a single line of code to hook our client up to the server (well, strictly speaking, we did write a _single_ line of code: `new Meteor.Collection('posts')`). But that's not all!

Bring up the second browser window and enter this in the browser console:

```js
❯ Posts.find().count();
2
```
<%= caption "Browser console" %>

The post is there too! But we never refreshed, or even interacted with the second browser, and we certainly didn't write any code to push updates out. It all just happened magically (and instantly too, although this will become more obvious later).

What's happened is that our server side collection has been informed by a client collection of a new post, and has taken on the task of distributing that post into the Mongo database and back out to all the other connected `post` collections. 

Still, fetching posts on the browser console isn't that useful. Let's learn how to wire that data into our templates, and in the process turn our simple HTML prototype into a real, functioning realtime web application.

### Keeping it Realtime

It's all very well looking at the contents of our Collections on the browser console, but what we'd really like to do is display the data, and the changes to that data, on the screen. In doing so we'll turn our app from a simple web *page* displaying static data, to a realtime web *application* with dynamic, changing data.

Let's find out how.

### Populating the database

The first thing we'll do is put some data into the database. We'll do so with a fixture file that loads a set of structured data into the `Posts` collection when the server first starts up. 

First, let's make sure there's nothing in the database. Stop the Meteor server (by pressing `ctrl-c`) and then, on the command line, run:

```bash
$ mrt reset
```

The reset command completely clears out the Mongo database. It's a useful command in development, where there's a strong possibility of our database falling into a inconsistent state. Now that the database is empty, we can add the following code to a file, to load up when the server first starts:

```js
if (Posts.find().count() === 0) {
  Posts.insert({
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  });
  
  Posts.insert({
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  });
  
  Posts.insert({
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  });
}
```
<%= caption "server/fixtures.js" %>

<%= commit "4-2", "Added data to the posts collection." %>

We've placed this file in the `server/` directory, so it will never get loaded on any user's browser. The code will run immediately when the server starts, and make `insert` calls on the database to add three simple posts in our `Posts` collection. As we haven't built any data security yet, there's no real difference between doing this in a file run on the server or in the browser. If we did have security though, the fact that this is running on the server would bypass such security; so it pays to be careful.

Now run your server again with `mrt`, and behind the scenes these three posts will get loaded into the database.

### Wiring the data to our HTML with helpers

Now, if we open up a browser console, we see all three posts loaded up into miniMongo:

```js
❯ Posts.find().fetch();
[..]
```
<%= caption "Browser console" %>

How do we get these posts into rendered HTML? We can use a template helper. We've already seen in Chapter 3 how Meteor allows us to bind a *data context* to our Handlebars templates to build HTML views of simple data strutures.

We can bind in our collection data in the exact same way:

```js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
```
<%= caption "client/views/posts/posts_list.js" %>

<%= commit "4-3", "Wired collection into `postsList` template." %>

Now, rather than pulling a list of posts as a static array from a variable, we return a `Cursor` to our `posts` helper. But what does this do? If we go back to our browser, we see:

<%= screenshot "4-3", "Using live data" %>

So can clearly that our `{{#each}}` helper has iterated over all of our `Posts`, and displayed them all on the screen. So the server-side collection is pulling the posts from Mongo, passing them over the wire to our client-side collection, and our handlebars helper is passing them into the template. 

Now, let's see things get cool. We'll add another post via the console:

```js
❯ Posts.insert({
  title: 'Meteor Docs', 
  author: 'Tom Coleman', 
  url: 'http://docs.meteor.com'
});
```
<%= caption "Browser console" %>

Look back at the browser -- you should see this:

<%= screenshot "4-4", "Adding posts via the console" %>

How has this happened? Has the browser reloaded itself? No. In fact, we've just seen reactivity in action for the first time. When we told handlebars to iterate over the `Posts.find()` cursor, it knew how to observe that cursor for changes, and patch the HTML in the simplest way in order to display the correct data on screen.

<% note do %>

### Inspecting DOM Changes

In this case, the simplest change possible was to add another `<li>` to our `<ul>`. If you want to prove to yourself that this is what's happened, here's a neat trick. In the DOM inspector, select the `<li>` corresponding to one of the existing posts. 

Now, in the javascript console, insert another post. When you tab back to the inspector, you'll see an extra `<li>`, corresponding to the new post, but you will still have the *same* existing `<li>` selected. This simple trick is a useful way to tell when elements have been re-rendered and when they have been left alone; something that may prove useful to you in the future.

<% end %>

### Connecting collections: publications and subscriptions

So far, we've had the `autopublish` package enabled, which, as we mentioned earlier, is not intended for production applications. Like its name indicates, this package simply says that each collection should be shared in it's entirety to each connected client. This isn't what we want anymore, so let's turn it off.

```bash
$ mrt remove autopublish
```

This has an instant effect. If you look in your browser now, you'll see that all our posts have gone! This because we were relying on `autopublish` to make sure our clientside collection of posts was a mirror of all the posts in the database. 

Although eventually we'll need to only transfer the posts that the user actually needs to see (taking into account things like pagination), for now, we'll just manually setup `Posts` to be published in it's entirety. To do so, we create a simple publish function that returns a `Cursor` which references all the posts:

```js
Meteor.publish('posts', function() {
  return Posts.find();
});
```
<%= caption "server/publications.js" %>

In the client, we need to *subscribe* to the publication. We'll just add this line to `forum.js`:

```js
Meteor.subscribe('posts');
```
<%= caption "client/main.js" %>

<%= commit "4-4", "Removed `autopublish` and set up a basic publication." %>

If we check the browser again, our posts are back. Phew! 

### Conclusion

So what have we achieved? Well, although we don't have a user interface for it yet, what we have now is a functional web application. We could deploy this application to the internet and (admittedly only via the browser console), start posting new stories and see them appear on in other user's browsers across the other side of the world. 

All with very little plumbing on our behalf. Things are going well.


