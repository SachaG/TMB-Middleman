---
title: Deploying
complete: 30
date: 0002/01/02
number: s1
sidebar: true
---

Some people like to work quietly on a project until it's perfect, while others can't wait to show the world as soon as possible. 

If you're the first kind of person and would rather develop locally for now, feel free to skip this chapter. On the other hand, if you'd rather take the time to learn how to deploy your Meteor app online, we've got you covered. 

In this chapter we'll cover 3 options for deploying: Meteor.com, Heroku, and EC2. 

### Deploying on Meteor.com

Deploying on Meteor.com couldn't be easier. Open the command line, navigate to your app's directory, and simply type:

```bash
$ meteor deploy myapp.meteor.com
```

Or in our case, since we're using Meteorite:

```bash
$ mrt deploy myapp.meteor.com
```

Or, if you want to use your own domain, set its CNAME to redirect to `origin.meteor.com` and then deploy with:

```bash
$ mrt deploy www.myapp.com
```

Hosting on Meteor is free, but is fairly limited since you don't have access to monitoring tools and can't control your resources.

### Deploying on Heroku

Deploying on [Heroku](http://heroku.com) is still free (as long as you only use one dyno, which is the only way you can make Meteor work on Heroku anyway, be warned), but it gives you a little more control over your app. 

We won't cover installing [Git](http://git-scm.com) and the Heroku command line here, but both can be done pretty easily with the [Heroku Toolbelt](https://toolbelt.herokuapp.com/).

You'll need to use the [Heroku Buildpack for Meteorite](https://github.com/oortcloud/heroku-buildpack-meteorite.git). Buildpacks contains special instructions for Heroku, in this case to specify how to set up a server to run Meteor apps properly. When it comes time to create your new Heroku app, simply use this command:

```bash
$ heroku create --stack cedar --buildpack https://github.com/oortcloud/heroku-buildpack-meteorite.git
```

Or, you can also add a buildpack to an existing Heroku app:

```bash
$ heroku config:add BUILDPACK_URL=https://github.com/oortcloud/heroku-buildpack-meteorite.git
```

You'll also need to provide a MongoDB database for your app. We recommend the [MongoHQ](https://www.mongohq.com/home) Heroku add-on (it comes with a nice UI for browsing your data), which you can either add via their web admin, or via the following command:

```bash
$ heroku addons:add Mongohq:small
```

Before our Heroku instance is ready, we also need to configure Meteor's `ROOT_URL` environment variable to tell the app where it's running:

```bash
$ heroku config:add ROOT_URL=http://www.domain.com
```

This is also a good time to add other config variables, such as `MAIL_URL`. For example, if you wanted to use [Mailgun](http://mailgun.com) to send emails from your app, you would type in something like this (after getting your own credentials from your Mailgun account):

```bash
$ heroku config:add MAIL_URL=smtp://postmaster%40YOUR_DOMAIN.mailgun.org:YOUR_PASSWORD@smtp.mailgun.org:587/
```

Now that our configuration is done, all that's left to do is to use Git to push to Heroku:

```bash
$ git push heroku
```

Congratulations, your app should now be up and running! And by the way, if you ever need to display your configuration variables (such as your MongoDB database's URL), just type:

```bash
$ heroku config
```

### Deploying On Your Own Server

Up to now, we've only talked about deploying on managed platforms like Meteor.com or Heroku. But let's see how to take it one step further and configure a server from scratch to run our app on a service like [EC2](http://aws.amazon.com/ec2/) or [Digital Ocean](http://digitalocean.com). It's actually not much harder, once you know one or two handy tricks.

<% note do %>

**Note:** We've packaged the whole following process into [Meteoric](https://github.com/julien-c/meteoric.sh), a convenient script you can install on your local environment that will let you deploy Microscope (or your own app) to EC2 with just two commands: `meteoric setup` and `meteoric deploy`!

<% end %>

Let's walk through deploying a Meteor app on an **Ubuntu 12.10 server** on EC2. You can fire an EC2 instance from your Amazon management console, then connect to it in the usual way.

You will first need to install git and MongoDB:

```bash
$ sudo apt-get install git mongodb
```

The first trick when deploying a Meteor app to your own server is that `node` still evolves quite quickly (including some breaking API changes), and the Meteor support for the latest stable node version sometimes lags for a while. At the time of this writing for instance (April 2013), meteor runs on node 0.8.x while the latest stable node is 0.10.x (support for node 0.10.x should land soon though!).

An option would be to use **`nvm`** ([Node version manager](https://github.com/creationix/nvm)), but it's a bit tricky to set up robustly, in particular if you're going to run node as `root` (more on that later). 

The easier way on Ubuntu is to add the `apt-get` repository for the `legacy` node release (i.e., the last stable release before the current stable release):

```bash
$ sudo add-apt-repository ppa:chris-lea/node.js-legacy
$ sudo apt-get update
$ sudo apt-get install nodejs npm
```

You can now install meteor and meteorite:

```bash
$ curl https://install.meteor.com | /bin/sh
$ sudo npm install -g meteorite
```

Then, checkout your app's Git repo (for instance, `git clone https://github.com/SachaG/microscope.git`), for example in `/home/meteor`.

The next step is to bundle your app, i.e. generate a fully-contained Node application in a tarball. It is certainly possible to bundle your app in your development environment and then just transmit the tarball, but for now we'd recommend checking out the actual code on the server. This approach has a couple of advantages:
* it is Git-based (just specify your project's repository)
* it doesn't require you to have meteor installed locally
* it doesn't require re-building packages like fibers (which are platform-dependent) 
* and finally, it should allow for hot code fixes (your node server doesn't stop when deploying your app)

Here's how we bundle and untar our app (it would actually be handy for Meteor to be able to directly "bundle as a directory, not a tarball"):

```bash
$ cd mymeteorapp 
$ meteor bundle ../bundle.tgz 
$ cd ..
$ tar -zxvf bundle.tgz 
```

Finally, let's run the app:

```bash
$ sudo PORT=80 MONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://myapp.com node bundle/main.js
```

If you're serving your app on HTTP's standard port 80, remember to run this command as root (as Node's error message is not that clear if you don't).

Also, like on Heroku, you can specify configuration options (`MAIL_URL`, `ROOT_URL`) as environment variables.

Finally, we'll need to make sure your app runs continuously, i.e. to have it restart automatically if it crashes. The simplest way to do that is to use `forever`:

```bash
$ npm install -g forever
$ forever start bundle/main.js
```

Forever preserves environment variables, so you just need to export them before starting the app: `export PORT=80 MONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://myapp.com`.

Something is still missing though: automatic startup of the app on the machine's reboot. Using Ubuntu's Upstart, you can very easily tell your OS that your meteor app should start (using `forever`) automatically whenever the server restarts. You can simply put the following snippet into e.g. `/etc/init/meteor.conf`, and type `service meteor start`. You don't need automatic respawns, as `forever` is already taking care of that!

```
# /etc/init/meteor.conf

start on (local-filesystems)
stop on shutdown

script

    cd /home/ubuntu
    export PORT=80 MONGO_URL=mongodb://localhost:27017/myapp ROOT_URL=http://myapp.com
    exec forever start bundle/main.js

end script
```

