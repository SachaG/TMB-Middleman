---
title: Getting Started
complete: 50
date: 0002/01/01
number: 2
---


Due to the fact that Meteor doesn't yet have support for 3rd party packages (so you can't use other folk's code), Tom Coleman (one of this book's authors) and some members of the community created [Meteorite](http://oortcloud.github.com/meteorite/), a wrapper for Meteor. Meteorite takes care of installing Meteor for you and hooking it together with any packages you might find.

### Installing Meteor via Meteorite

So, let's install Meteorite. To begin with, you'll need to ensure node and git are installed on your machine. Install them in the standard way for your OS, or try these links:
 
- [Node download site](http://nodejs.org/download/)
- [Git download site](http://git-scm.com/downloads)

Now, let's install Meteorite. It's a npm executable, so we install it with

```bash
$ npm install -g meteorite
```

That's it! Meteorite will handle things from here.

Note: there is no Windows support for Meteorite yet, but you can take a look at [our windows tutorial](http://themeteorbook.com/2013/03/20/using-meteor-and-atmopshere-on-windows/) instead.

### Creating a simple app

Ok, first things first, let's create an app. We use Meteorite's commandline tool `mrt`:

```bash
$ mrt create microscope
```

This command will download Meteor, and set up a basic Meteor project for you, ready to use. When it's done, you should see a directory, `microscope/`, containing:

```bash
microscope.css  
microscope.html 
microscope.js   
smart.json 
smart.lock
```

The app is a simple boilerplate application that Meteor creates for you, demonstrating some simple parts. 

Our app doesn't do much yet, but we can already run it! Just go back to your terminal and just type:

```bash
$ mrt
```

Now point your browser to `http://localhost:3000/` (or the equivalent `http://0.0.0.0:3000/`) and you should see something like this: 

<%= screenshot "2-1", "Meteor's Hello World." %>

<%= commit "2-1", "Created basic microscope project." %>

Congrats! You've got your first Meteor app running!

### Add some basic wireframing packages

Let's use Meteorite to add an Atmosphere smart package that will come in handy later.

```bash
$ mrt add bootstrap-updated
```

<%= commit "2-2", "Added bootstrap-updated package." %>

<% note do %>

### A Note on Packages

When speaking about packages in the context of Meteor, it pays to be specific. Meteor uses four basic types of packages:

- The Meteor core itself is split into different core packages. You will pretty much never need to worry about these.
- The Meteor smart packages are a group of [about 15 packages](http://docs.meteor.com/#packages) (you can get the full list with `meteor list`) that come bundled with Meteor. You can add them even when you're not using Meteorite, with `meteor add packagename`. 
- Atmosphere smart packages are third-party Meteor packages listed on [Atmosphere](http://atmosphere.meteor.com). You will need Meteorite to be able to import and use them. 
- NPM (Node Package Manager) packages are Node.js packages. Although they don't work out of the box with Meteor, they *can* be used by the previous two types of packages. 

<% end %>

### The File Structure of a Meteor App

Before we can start coding, let's take a minute to set up our project properly. Open up the `forum` directory and delete all the files. We're going to start clean! 

Let's create five root directories: `/client`, `/server`, `/public`, `/lib`, and `/collections`. Some of these directories are special. When it comes to files, Meteor has a few rules:

- Code in the `/server` directory only runs on the server.
- Code in the `/client` directory only runs on the client.
- Everything else runs on both the client and server.
- Files in `/lib` are loaded before anything else.
- Any `main.*` file is loaded after everything else.
- Your static assets (fonts, images, etc.) go in the `/public` directory. 

Note that although Meteor has these rules, it doesn't really force you to use any predefined file structure for your app if you don't want to. So the structure we suggest is just our way of doing things, not a rule set in stone. 

We encourage you to check out the [official Meteor docs](http://docs.meteor.com/#structuringyourapp) if you want more details on this.

### No public?

OK, we lied. We don't actually need the `public/` directory for the simple reason that Microscope doesn't use any static assets! But since most other Meteor apps are going to include at least a couple images, we thought it was important to cover it too. 

By the way, you might also notice a hidden `.meteor` directory. This is where Meteor stores its own code, and modifying  things in there is usually a very bad idea. The only exceptions to this are the `.meteor/packages` and `.meteor/release` files, which are respectively used to list your smart packages and the version of Meteor to use.


<% note do %>

### Underscores vs CamelCase

The only thing we'll say about the age-old underscore (`my_variable`) vs camelCase (`myVariable`) debate is that it doesn't really matter which one you pick as long as you stick to it. 

In this book, we're using camelCase because it's the usual JavaScript way of doing things (after all, it's JavaScript, not java_script!). 

The only exceptions to this rule are file names, which will use underscores (`my_file.js`), and CSS classes, which use hyphens (`.my-class`). The reason for this is that in the filesystem, underscores are most common, while the CSS syntax itself already uses hyphens (`font-family`, `text-align`, etc.).

<% end %>

### Taking Care of CSS

This book is not about CSS. So to avoid slowing you down with styling details, we've decided to make the whole stylesheet available from the start, so you don't need to worry about it ever again. 

CSS automatically gets loaded and minified by Meteor, so unlike other static assets it goes into `/client`, not `/public`. Go ahead and create a `client/stylesheets/` directory now, and put this `style.css` file inside it:

```css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
```
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Re-arranged file structure." %>

<% note do %>

### A Note on CoffessScript

In this book we'll be writing in pure JavaScript. But if you prefer CoffeeScript, Meteor has you covered. Simply add the CoffeeScript package and you'll be good to go:

`mrt add coffeescript`

<% end %>