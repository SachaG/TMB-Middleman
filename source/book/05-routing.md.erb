---

title: Routing
complete: 100
date: 0005/01/01
---

## Routing

<% chapter do %>
#### In this chapter, you will:

- Learn about routing in Meteor
- Create post discussion pages, with a unique URLs
- Learn how to link to to those URLs properly
<% end %>

Now we have a list of posts (that will eventually be submitted by users), we need a discussion page, where eventually users can talk about each post.

We'd like those pages to have a permalink, so we'll need some kind of routing to enable us to look at the browser's URL bar and use what's there to affect what's on the screen.

### Adding the Router Package

First off, let's install the Router package from atmosphere:

```bash
$ mrt install router
```
<%= caption "Terminal" %>

This command downloads and installs the router package into our app, ready to use.

### Routing: mapping URLs to templates

So far, we've only had a static layout of templates, so although the content of what the user sees can change, the structure is always the same: a header, with a list of posts below it.

The Router gives us a special template helper `{{renderPage}}`, which renders the current *page*. We place this helper within our layout, and gain a dynamic template which changes when the URL changes.

What do we mean by a page here? It's the Router's concept of a page--the Router's single job is to map URLs to templates to be inserted in the `{{renderPage}}` helper.. Let's see how. We'll start by inserting the `{{renderPage}}` helper into our layout:

```html
<body>
  ...
  <div id="main" class="row-fluid">
    {{renderPage}}
  </div>
  ...
</body>
```
<%= caption "client/main.html" %>

So we've replaced the inclusion of the `posts` template with a call to `renderPage` helper. You'll notice that after this change, we see nothing on the screen. This is because the router maps URLs it doesn't know about to an empty template.

So to begin, we can regain our old behaviour, by mapping the empty URL `/` to the `posts` template. Let's make a `helpers` directory inside `client`, and inside create `router.js` :

```js
Meteor.Router.add({
  '/': 'postsList'
});
```
<%= caption "client/helpers/router.js"%>

If it seems straightforward, that's because is. In the router, we've simply said "if the user browses to `/`, render the template named `posts`". 

### Named Routes

There's an added advantage to what we've just done. In creating the route, we've also named it. Although you can explicitly choose a name for your route, by default, the Router chooses the name of the template being mapped to. So we've created a route, named `posts`, that maps `/` to `posts`.

Why is the name of the route important? The Router gives us a couple of conveniences that allows us to write links that use our routes. The important one is a handlebars helper, `{{postsListPath}}` in this case, which returns the URL path component. So in our case, it returns `/`.

Let's use that in our layout--we want our logo to point us back to the posts list, so we can do

```html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{postsListPath}}">Microscope</a>
  </div>
</header>
```
<%= caption "client/main.html"%>

<%= commit "5-1", "Very basic routing." %>

### Routing to a specific Post using the Session

Now we've seen how to map the root URL to the `posts` template, let's map a post-specific URL to a page that displays the details of a single post.

To start with, we'll create a new template that just renders the same post meta data template that we used earlier in the list of posts.

```html
<template name="postPage">
  {{#with currentPost}}
    {{> postItem}}
  {{/with}}
</template>
```
<%= caption "client/views/posts/post_page.html" %>

This template just grabs the post we are interested in (we'll see how soon) and renders the meta data for it. Later we'll add much more interesting things to this page, like a discussion via comments, but for now, we need to get this page working.

To do so, we are going to create another named route, this time mapping URL paths of the form `/posts/<ID>` to the `postPage` template. There's only one added piece of complexity: we need to store that `<ID>` somewhere, so we know what the `currentPost` is when we render the template. The place to store that information is the *Session*:

```js
Meteor.Router.add({
  '/': 'postsList',
  
  '/posts/:_id': {
    to: 'postPage', 
    and: function(id) { Session.set('currentPostId', id); }
  }
});
```
<%= caption "client/helpers/router.js" %>

Our previous route was very simple and just mapped a URL path to a template name. Now instead, we are mapping a URL to two things: a template name (in the `to` attribute), which again doubles as the name of our route, and an auxilary function in the `and` attribute. What this does is that now our route has a side effect---it sets the *Session variable* `'currentPostId'` to the `id` value that has been pulled out of the URL.

The Session in Meteor is the global store of state in the browser. It lives soley on the client and is intended to keep track of exactly what the user is looking at. In fact, as we'll see, when a hot code reload happens, Meteor is able to get the user back to the same place they were before, thanks to the fact that the session keeps track of everything they are seeing.

In our case, we are just interested in using the session to get the correct post rendered. So we can just access the session variable again when we create a helper to pick out the `currentPost`:

```js
Template.postPage.helpers({
  currentPost: function() {
    return Posts.findOne(Session.get('currentPostId'));
  }
});
```
<%= caption "client/views/post_page.js"%>

Remember that `findOne` returns a single post that matches a query, and that providing just an `id` as an argument is a short hand for `{_id: id}`. 

So what's happening here exactly? If the user browses to a URL  like `http://localhost:3000/posts/12345`, the router realizes that they are at a URL that matches the `postPage` route, and thus `postPage` template is what renders inside the `{{renderPage}}` helper. At the same time it runs the `and` function, which sets the `currentPostId` session variable.

Then, as the `postPage` template is rendered, it queries the session for that same variable, thus retrieving the correct post and rendering everything correctly.

### Using a dynamic named route helper

The final thing we'd like to do is make sure our post template properly puts down links that point to the right place. Luckily, as we've (implicitly) named this route `postPage`, we get a `{{postPagePath}}` helper that we can use. 

The only complication is we can't just use it like that, as it won't know what `id` value to substitute into the URL path (which was `'/posts/:_id'`). Luckily however, `postPagePath` helper can take an argument, and is smart enough to know that if it's passed an object, it should look at the `_id` attribute of that object and substitute it in (which is why we named that part `:_id`). So it's pretty straightforward to link things correctly:

```html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
    <a href="{{postPagePath this}}" class="discuss btn">Discuss</a>
  </div>
</template>
```
<%= caption "client/views/posts/post_item.html"%>

<%= commit "5-2", "Routing to a single post page." %>

The only trick here is that we've reference the template's data context directly (rather than an attribute), by using the special `this` accessor.

Let's check if it works; browse to the post list and click on one of the 'Discuss' links. We should see:

<%= screenshot "5-2", "A single post page." %>

<% note do %>
One thing to realise is that these URL changes are happening using HTML5 pushState. The Router picks up clicks on URLs that are internal to the site, and prevents the browser from browsing away from the app, instead just making the necessary changes to the app's state (reactively of course), with the net result of template changes as we've seen.

If everything is working correctly the page should change instantaneously. In fact, sometimes things change so fast that some kind of page transition might be needed. This is outside of the scope of this book, but an interesting topic nonetheless.
<% end %>
