---

title: Voting
complete: 80
date: 0013/01/01
---

## Voting

<% chapter do %>
#### In this chapter, we'll:

- Build a system where users can vote on posts.
- Rank our front page posts by vote.
- Learn how to write a general handlebars helper.
- Learn a little more about data security in Meteor.
- Cover some interesting performance considerations in MongoDB.
<% end %>

Now we have a discussion starting around our posts, it's important that people can find the most interesting posts to discuss. As such, we need some kind of ranking system to order our post with. 

We could build a complex ranking system with karma, time-based decay of points, and many other things (Microscope's big brother Telescope is a good example of that). But for Microscope, we'll keep things simple and just rate posts by the number of votes they've received.

Let's start by giving users a way to vote on posts. 

### Data model

We'll store a list of upvoters on each post so we know whether to show the upvote button to users, as well as to prevent people from voting twice. 

<% note do %>

### Data Privacy & Publications

We'll be publishing these lists of upvoters in their entirety to all users, making that data publicly accessible via the browser console. 

This is the kind of data privacy problem that can arise from the way collections work. For example, do we want people to be able to find out who has voted for their posts?

In our case it doesn't matter much, but it's important to acknowledge the issue at least. 

<% end %>

We'll also denormalize the total number of upvoters on a post for ease of usage. So, we'll be adding two attributes to our posts, `upvoters` and `votes`. Let's start by making sure they are initialized when posts are created:

```js
//...

// check that there are no previous posts with the same link
if (postAttributes.url && postWithSameLink) {
  throw new Meteor.Error(302, 
    'This link has already been posted', 
    postWithSameLink._id);
}

// pick out the whitelisted keys
var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {
  userId: user._id, 
  author: user.username, 
  submitted: new Date().getTime(),
  commentsCount: 0,
  upvoters: [], 
  votes: 0
});

var postId = Posts.insert(post);

return postId;

//...
```
<%= caption "collections/posts.js" %>

### Building our Voting Templates

First off, we'll add an upvote button to our post partial:

```html
<template name="postItem">
  <div class="post">
    <a href="#" class="upvote btn">⬆<a/>
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        {{votes}} Votes,
        submitted by {{author}},
        <a href="{{postPagePath this}}">{{commentsCount}} comments</a>
        {{#if ownPost}}<a href="{{postEditPath this}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{postPagePath this}}" class="discuss btn">Discuss</a>
  </div>
</template>
```
<%= caption "client/views/posts/post_item.html" %>

<%= screenshot "13-1", "The upvote button" %>

Next, we'll call a server upvote method when the user clicks on the button:

```js
//...

Template.postItem.events({
  'click .upvote': function(event) {
    event.preventDefault();
    Meteor.call('upvote', this._id);
  }
});
```
<%= caption "client/views/posts/post_item.js" %>

Finally, we'll go back to our `collections/posts.js` file and add a Meteor server-side method that upvote posts:

```js
Posts = new Meteor.Collection('posts');

Posts.allow({
  update: ownsDocument,
  remove: ownsDocument
});

Posts.deny({
  update: function(userId, post, fieldNames) {
    // may only edit the following three fields:
    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);
  }
})


Meteor.methods({
  post: function(postAttributes) {
    //...
  },
  
  upvote: function(postId) {
    var user = Meteor.user();
    // ensure the user is logged in
    if (!user)
      throw new Meteor.Error(401, "You need to login to upvote");
    
    var post = Posts.findOne(postId);
    if (!post)
      throw new Meteor.Error(422, 'Post not found');
    
    if (_.include(post.upvoters, user._id))
      throw new Meteor.Error(422, 'Already upvoted this post');
    
    Posts.update(post._id, {
      $addToSet: {upvoters: user._id},
      $inc: {votes: 1}
    });
  }
});
```
<%= caption "collections/posts.js" %>

<%= commit "13-1", "Added basic upvoting algorithm." %>

The method is fairly straightforward. We do some defensive checks to ensure that the user is logged in and that the post exists. Then we double check that the user hasn't already voted for the post, and if not, we increment the vote's total score and add the user to the set of upvoters.

This final step is interesting--we've used a couple of special Mongo operators. There are many more to learn, but these two are extremely helpful--`$addToSet` adds an item to an array property as long as it doesn't already exist, and `$inc` simple increments an integer field.

### User Interface Tweaks

If the user is not logged in, or has already upvoted a post, they won't be able to vote. To reflect this is our UI, we'll use a helper to conditionally add a `disabled` CSS class to the upvote button.

```html
<template name="postItem">
  <div class="post">
    <a href="#" class="upvote btn {{upvotedClass}}">⬆<a/>
    <div class="post-content">
      //...
  </div>
</template>
```
<%= caption "client/views/posts/post_item.html" %>

```js
Template.postItem.helpers({
  ownPost: function() {
    //...
  },
  domain: function() {
    //...
  },
  upvotedClass: function() {
    var userId = Meteor.userId();
    if (userId && !_.include(this.upvoters, userId)) {
      return 'btn-primary upvoteable';
    } else {
      return 'disabled';
    }
  }
});
//...
});
```
<%= caption "client/views/posts/post_item.js" %>

<%= screenshot "13-2", "Greying out upvote buttons." %>

<%= commit "13-2", "Grey out upvote link when not logged in / already voted." %>

Next, you may notice that posts with a single vote are labelled "1 vote**s**". Let's see how to pluralize those labels properly. Pluralization is a complicated process, but for now we'll do it in a fairly simplistic way. We'll make a general Handlebars helper that we can use anywhere:

```js
Handlebars.registerHelper('pluralize', function(n, thing) {
  // fairly stupid pluralizer
  if (n === 1) {
    return '1 ' + thing;
  } else {
    return n + ' ' + thing + 's';
  }
});
```
<%= caption "client/helpers/handlebars.js" %>

The helpers we've made before have been tied to the controller and template that they apply to. By using `Handlebars.registerHelper`, we've created a global helper that can be used within any template:

```html
<template name="postItem">
//...
<p>
  {{pluralize votes "Vote"}},
  submitted by {{author}},
  <a href="{{postPagePath this}}">{{pluralize commentsCount "comment"}}</a>
  {{#if ownPost}}<a href="{{postEditPath this}}">Edit</a>{{/if}}
</p>
//...
</template>
```
<%= caption "client/views/posts/post_item.html" %>

<%= screenshot "13-3", "Perfecting Proper Pluralization (now say that 10 times)" %>

<%= commit "13-3", "Added pluralize helper to format text better." %>

Now we should see "1 vote". Better.

### Smarter voting algorithm

Our upvoting code is pretty solid now, but there is one problem. In the upvote method, we make two calls to Mongo--one to grab the post, then another to update it. 

There's two issues with this. Firstly, it's inefficient to go to the database twice (on the server); but more importantly, it introduces a race condition. We are following the following algorithm:

1. Grab the post from the database.
2. Check if the user has voted.
3. If not, do a vote by the user.

What if the same voter votes for the post in between steps 1 and 3? Then it's possible the user could vote for the same post twice. Thankfully, Mongo allows us to be smarter, and combine steps 1-3 into a single Mongo command:

```js
Posts = new Meteor.Collection('posts');

Posts.allow({
  update: ownsDocument,
  remove: ownsDocument
});

Posts.deny({
  update: function(userId, post, fieldNames) {
    // may only edit the following three fields:
    return (_.without(fieldNames, 'url', 'title', 'message').length > 0);
  }
})


Meteor.methods({
  post: function(postAttributes) {
    //...
  },
  
  upvote: function(postId) {
    var user = Meteor.user();
    // ensure the user is logged in
    if (!user)
      throw new Meteor.Error(401, "You need to login to upvote");
    
    Posts.update({
      _id: postId, 
      upvoters: {$ne: user._id}
    }, {
      $addToSet: {upvoters: user._id},
      $inc: {votes: 1}
    });
  }
});
```
<%= caption "collections/posts.js" %>

<%= commit "13-4", "Better upvoting algorithm." %>

What are saying is "find all the posts with this `id` that this user hasn't yet voted for, and update them in this way". If the user hasn't yet voted, it will of course find the post with that `id`. If the user _has_ voted, then the query will match no documents, and consequently nothing will happen.

The only downside is that now we can't tell the user that they've already voted for the post (since we got rid of the database call that checked this). But they should know that from the user interface anyway.

<% note do %>
#### Latency compensation

Let's say you tried to cheat and send one of your posts to the top of the list by tweaking its number of votes:

```js
  Posts.update(postId, {$set: {votes: 10000}});
```
<%= caption "Browser console" %>

(Where `postId` is the id of one of your posts)

This brazen attempt at gaming the system would be caught by our `deny()` callback (in `collections/posts.js`, remember?) and immediately negated.

But if you looked carefully, you'll have seen latency compensation in action. It may not have been visible, but you may have seen the post jump to the top of the list briefly, before shooting back into position. 

What's happened? In your local `Posts` collection, the `update` was applied without incident. This happens instantly, so the post shot to the top of the list. Meanwhile, on the server, the `update` was being denied. So some time later (measured in the milliseconds if you are running Meteor on your own machine), the server returned an error, telling the local collection to revert itself. 

The end result: while waiting for the server to responds, the user interface can't help but trust the local collection. As soon as the server comes back and denies the modification, the user interfaces adapts to reflect that. 

<% end %>

### Ranking the front page posts by number of votes

Now that we have a score for each post based on the number of votes, let's display a "best" posts list! To do so, we'll see how to manage two separate subscriptions against the post collection, and generalise our `post_list` template a little.

To start off with, we want to have *two* paginated subscriptions, one for for each sort order. We'll load them both up at all times (no matter what page we are on), so that we can quickly switch between both views without any loading time:

```js
Meteor.publish('newPosts', function(limit) {
  return Posts.find({}, {sort: {submitted: -1}, limit: limit});
});

Meteor.publish('topPosts', function(limit) {
  return Posts.find({}, {sort: {votes: -1, submitted: -1}, limit: limit});
});
```
<%= caption 'server/publications.js' %>

```js
newPostsHandle = Meteor.subscribeWithPagination('newPosts', 10);
topPostsHandle = Meteor.subscribeWithPagination('topPosts', 10);
```
<%= caption 'client/main.js' %>

Note that when we sort by `votes`, we have a secondary sort by submitted timestamp to ensure that the ordering is complete.

Next, we'll prepare some routes:

```js
Meteor.Router.add({
  '/': {to: 'bestPosts', as: 'home'},
  '/best': 'bestPosts',
  '/new': 'newPosts',
```
<%= caption 'client/helpers/router.js' %>

We've renamed `/` to `home`, and created two new routes, one for the newest posts (which is still useful after all) and the main show, the `bestPosts` route, which we will make order by the number of votes!

The next thing we need to do is create the two templates, `bestPosts` and `newPosts` which are going to be extensions of the `postsList` template:

```html
<template name="newPosts">
  {{> postsList options}}
</template>

<template name="bestPosts">
  {{> postsList options}}
</template>

<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
    
    {{#if postsReady}}
      {{#unless allPostsLoaded}}
    		<a class="load-more" href="#">Load more</a>
      {{/unless}}
    {{else}}
      <div>{{> spinner}}</div>
    {{/if}}
  </div>
</template>

```
<%= caption 'client/views/posts/posts_list.html' %>

The `post_list` template hasn't changed, but we do need to change the various helpers to respect the options that are passed in by the two parent templates. So we write:

```js
Template.newPosts.helpers({
  options: function() {
    return {
      sort: {submitted: -1},
      handle: newPostsHandle
    }
  }
});

Template.bestPosts.helpers({
  options: function() {
    return {
      sort: {votes: -1, submitted: -1},
      handle: topPostsHandle
    }
  }
});

Template.postsList.helpers({
  posts: function() {
    return Posts.find({}, {sort: this.sort, limit: this.handle.limit()});
  },
  postsReady: function() {
    return this.handle.ready();
  },
  allPostsLoaded: function() {
    return this.handle.ready() &&  
      Posts.find().count() < this.handle.loaded();
  }
});

Template.postsList.events({
  'click .load-more': function(event) {
    event.preventDefault();
    this.handle.loadNextPage();
  }
});
```
<%= caption 'client/views/posts/posts_list.js' %>

This code is a little bit complex, but is an instructive pattern for generalized templates.

The `options` that we pass into the `post_list` template consist of two parts: a `sort` specifier, that tells the `post_list` what order to render posts in. Secondly a `handle`, which is one of the two subscription handles that tell us about pagination. 

With those two things set, we can alter our various subscription state reading helpers accordingly, and gain a best posts list:

<%= screenshot "13-4", "Ranking by points" %>

<%= commit "13-5", "Added two publications for posts, and pages to display them." %>

### A Better Header

Now that we have two post list pages, it can be hard to know just which list you're currently viewing. So let's revisit our header to reflect that. Let's create a `header.js` controller and create a helper that uses the current path and a named route to set an active class on our navigation items:

```html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="/">Microscope</a>
      <ul class="nav">
        <li class="{{activeRouteClass 'newPosts'}}">
          <a href="{{homePath}}">New</a>
        </li>
        <li class="{{activeRouteClass 'home', 'bestPosts'}}">
          <a href="{{bestPostsPath}}">Best</a>
        </li>
        {{#if currentUser}}
          <li class="{{activeRouteClass 'postSubmit'}}">
            <a href="/submit">Submit Post</a>
          </li>
        {{/if}}
        <li class="dropdown">
          {{> notifications}}
        </li>
      </ul>
      <ul class="nav pull-right">
        <li>{{loginButtons}}</li>
      </ul>
    </div>
  </header>
</template>
```
<%= caption 'client/views/includes/header.js' %>

```js
Template.header.helpers({
  activeRouteClass: function(/* route names */) {
    var args = Array.prototype.slice.call(arguments, 0);
    args.pop();
    
    var active = _.any(args, function(name) {
      return location.pathname === Meteor.Router[name + 'Path']();
    });
    
    return active && 'active';
  }
});
```
<%= caption 'client/views/includes/header.js' %>

<%= screenshot "13-5", "Showing the active page" %>

For each navigation `<li>`, we call `activeRouteClass` with a list of one or more route names which should lead to this item being active. Then in the helper, we simply check if the URL for that named route is equal to the current location, and return the class `active` if so.

<%= commit "13-6", "Added active classes to the header." %>