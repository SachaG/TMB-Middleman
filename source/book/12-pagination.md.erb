---

title: Pagination
complete: 80
date: 0012/01/01
---

## Pagination and Subscriptions

<% chapter do %>
#### In this chapter, we'll:

- Learn more about Meteor's subscriptions, and how we can use them to control data.
- Use the `paginated-subscription` package to step through a list of posts, without publishing them all at once.
- Create a special subscription to deal with direct links to post discussions.
- Be more careful with monitoring when our data is loading and keeping the user updated of what's happening.
<% end %>

Things are looking pretty great with Microscope, and we can expect a hit reception when it's released to the world. So we should probably think a little about the performance implication of the rash of new posts that are going to be entered into the site as it takes off!

We've spoken before about how a client side collection should contain a subset of the data on the server, and we've even managed to achieve that for our notification and comments collections. 

But we are still publishing all of our posts in one go to all connected users. Eventually, if we expect thousands of links to be posted, this is going to become extremely problematic. 

So we need to paginate our posts.

### Getting more posts

First off, let's quickly write some simple code to load up a bunch of posts in our fixture data, so we've got enough that pagination makes sense.

```js
// Fixture data 
if (Posts.find().count() === 0) {

  //...
  
  Posts.insert({
    title: 'The Meteor Book',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://themeteorbook.com',
    submitted: now - 12 * 3600 * 1000,
    commentsCount: 0
  });
  
  for (var i = 0; i < 10; i++) {
    Posts.insert({
      title: 'Test post #' + i,
      author: sacha.profile.name,
      userId: sacha._id,
      url: 'http://google.com/?q=test-' + i,
      submitted: now - i * 3600 * 1000,
      commentsCount: 0
    });
  }
}
```
<%= caption "server/fixtures.js" %>

<%= commit "12-1", "Added enough posts that pagination is necessary." %>

### Using the Paginated Subscription package

To achieve pagination, we'll use the `paginated-subscription` package, which can be used to take an ordinary subscription, and paginate it in with an "Infinite Scroll"-type user experience.

```bash
mrt add paginated-subscription
```
<%= caption "command line" %>

Using the package is easy--we just augment our calls to `publish` and `subscribe` with numeric arguments indicating the number of posts we'd like per page. So in `main.js`, we do:

```js
Meteor.subscribeWithPagination('posts', 10);
```
<%= caption "client/main.js" %>

This tells the package to setup a subscription with `10` posts coming up each time we head to a new page. 

At the server end, we just need to modify our `'posts'` subscription to take a final argument indicating how many posts we want to send down at this moment. So we change it to:

```js
Meteor.publish('posts', function(limit) {
  return Posts.find({}, {sort: {submitted: -1}, limit: limit});
});
```
<%= caption "server/publications.js" %>

As we are no longer publishing all the posts, we need to be careful about the order that we retrieve them out of the database in. Here, we are publishing the latest `limit` posts, in order of submission date. Once we've wired it into our user interface, the package will take care of increasing the `limit` variable as the user asks to see more posts.

### Using the subscription handle

Let's revisit our `main.js` app controller and assign a variable to our paginated subscription. This will expose some very useful functions:

```js
postsHandle = Meteor.subscribeWithPagination('posts', 10);

Meteor.autorun(function() {
  Meteor.subscribe('comments', Session.get('currentPostId'));
})

Meteor.subscribe('notifications');
```
<%= caption "client/main.js" %>

The paginated subscription handle has three useful (reactive) functions that we can use in our helpers to figure out what's happening with the subscription:

 - `handle.limit()` -- this is the number of documents that the subscription has asked the server for.
 - `handle.loaded()` -- this is the amount of documents that the server claims to have returned. It's a simple counter that gets incremented by `n` (in our case, 10) each time we click "load more", so the actual number of documents could be less if we've reached the end.
 - `handle.loading()` -- is a shorthand to check if the two above are the same, which tells us that the subscription is "ready".

We can use the combination of those three helpers to manufacture our "load more" solution. To begin with, we'll add a few elements to our post list template:

```html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
    
    {{#if postsReady}}
      <div class="grid more-button {{#if allPostsLoaded}} hidden {{/if}}">
        <a class="more-link" href="#">Load more</a>
      </div>
    {{else}}
      <div>Loading...</div>
    {{/if}}
  </div>
</template>
```
<%= caption "client/views/posts/posts_list.html" %>

We've added at the bottom of our list either a button saying "Load more", or a spinner indicating if we are waiting on the server to do so.

In order to implement this, we need to set up the right helpers on the `postsList` collection, which we can do using the paginated subscription handle functions:

```js
Template.postsList.helpers({
  posts: function() {
    return Posts.find({}, {sort: {submitted: -1}, limit: postsHandle.limit()})
  },
  postsReady: function() {
    return ! postsHandle.loading();
  },
  allPostsLoaded: function() {
    return ! postsHandle.loading() && 
      Posts.find().count() < postsHandle.loaded();
  }
});
```
<%= caption "client/views/posts/posts_lists.js" %>

Working out if the current list of posts are ready is easy enough, as we can just ask the handle if it's still loading. Working out if all the posts are loaded is a little more tricky. We need to make sure that we aren't still waiting for more posts, and then see if the total number of posts we do have is less that how many the subscription thinks we should have. If it's less, that's a sign that there are no posts left to load.

<%= diagram "pagination_diagram", "Comparing Posts.find().count() and postsHandle.loaded()" %>

You'll notice also that we changed the `posts` function to return the posts in the correct order, and limited it to show only as many we are currently supposed to show, according to the handle. This is because there may be other posts in the collection, as we'll see later.

### Hooking up the "Show more" button

Finally, we need to make the show more button work. Luckily, the paginated subscription makes this easy for us. It provides a `handle.loadNextPage()` function which does exactly that. So we just need to call it:

```js
Template.postsList.events({
  'click .more-link': function(event) {
    event.preventDefault();
    postsHandle.loadNextPage();
  }
});
```
<%= caption "client/views/posts/posts_lists.js" %>

It's simple enough, and we can now see the post "load more" button in action:

<%= screenshot "12-1", "The Load More button" %>

### Direct links to old posts

It's all very well just loading the 10 newest post by default, but what if someone browses to the permalink of a post which is older? Let's try visiting the URL of the 11th post and seeing what happens.

We can get there by making sure we have at least eleven post loaded on the post list page, and then opening the eleventh (or any post past the first 10):

<%= screenshot "12-2", "The 11th Post" %>

If we refresh the page, we reset all our subscriptions, and our paginated subscription reverts to just loading the first ten posts. So now we see:

<%= screenshot "12-3", "Vanishing Post" %>

You'll see that we are looking at an empty post with no data. If you think about it, it makes sense--we are loading up the ten newest posts into our local Posts collection, but we've never loaded the post we wanted!

What are we to do? Do we need to alter our `posts` publication to also factor in the single post we are interested in? We don't. We'll let you in on a little secret here: you can have more than one publication for each collection! 

A couple chapters back, we simply named our "X newest posts" publication `'posts'`. But that name was just a convenience because it was the only publication involving posts (also at that point it published all the posts too!).

Now we've limited it , we should really call that publication `'newPosts'`, and in fact we'll do that now. At the same time, let's make a _new_ publication, for a single post, identified by `id`:
```js
Meteor.publish('newPosts', function(limit) {
  return Posts.find({}, {sort: {submitted: -1}, limit: limit});
});

Meteor.publish('singlePost', function(id) {
  return id && Posts.find(id);
});
```
<%= caption "server/publications.js" %>

Now, let's subscribe to the right posts on the client side:
```js
var postsHandle = Meteor.subscribeWithPagination('posts', 10);

Meteor.autorun(function() {
  Meteor.subscribe('singlePost', Session.get('currentPostId'));
});
```
<%= caption "client/main.js" %>

So we can see that we subscribe to *both* publications on the client side, and the correct data is loaded. The single post that we want to load is in the `currentPostId` session variable (as we've seen before), and we just need to pass it through to the `singlePost` subscription.

<% note do %>
What does `Meteor.autorun` do and why do we need to wrap our subscription in it? 

Remember that the Session is a *reactive data source*. When we use the Session in template helpers, we are implicitly using them in reactive *computations* as a template contains such a context. What does this mean? It means that if the reactive source changes, the computation will know to re-run itself, with the net result of the template re-rendering itself, which is exactly what we want.

Here, we want the subscription to reset itself whenever the `currentPostId` session variable changes. To do so, we need to set up a similiar reactive computation. `Meteor.autorun` does this--as the name implies, the code inside the autorun will automatically run and keep running each and every time the reactive data sources used inside it change.
<% end %>















