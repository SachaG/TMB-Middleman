---

title: Comments
complete: 100
date: 0010/01/01
---

## Commenting

The point of a social news site is creating a community of users, and there's no way we can do that with letting people talk to each other. So let's make some comments!

### Getting started

We'll begin by creating a new collection to store comments in, and adding some basic fixture data into that collection.

```js
Comments = new Meteor.Collection('comments');
```
<%= caption "collections/comments.js" %>

```js
// Fixture data 
if (Posts.find().count() === 0) {
  var now = new Date().getTime();
  
  // create two users
  var tomId = Meteor.users.insert({
    profile: { name: 'Tom Coleman' }
  });
  var tom = Meteor.users.findOne(tomId);
  var sachaId = Meteor.users.insert({
    profile: { name: 'Sacha Greif' }
  });
  var sacha = Meteor.users.findOne(sachaId);
  
  var telescopeId = Posts.insert({
    title: 'Introducing Telescope',
    userId: sacha._id,
    author: sacha.profile.name,
    url: 'http://sachagreif.com/introducing-telescope/',
    submitted: now - 7 * 3600 * 1000
  });
  
  Comments.insert({
    postId: telescopeId,
    userId: tom._id,
    author: tom.profile.name,
    submitted: now - 5 * 3600 * 1000,
    body: 'Interesting project Sacha, can I get involved?'
  });
  
  Comments.insert({
    postId: telescopeId,
    userId: sacha._id,
    author: sacha.profile.name,
    submitted: now - 3 * 3600 * 1000,
    body: 'You sure can Tom!'
  });
  
  Posts.insert({
    title: 'Meteor',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://meteor.com',
    submitted: now - 10 * 3600 * 1000
  });
  
  Posts.insert({
    title: 'The Meteor Book',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://themeteorbook.com',
    submitted: now - 12 * 3600 * 1000
  });
}
```
<%= caption "server/fixtures.js" %>

Let's not forget to also publish our new collection, and subscribe to it too:

```js
Meteor.subscribe('posts');
Meteor.subscribe('comments');
```
<%= caption "client/main.js" %>

```js
Meteor.publish('posts', function() {
  return Posts.find();
});

Meteor.publish('comments', function() {
  return Comments.find();
})
```
<%= caption "server/publications.js" %>

<%= commit "10-1", "Added comments collection, pub/sub and fixtures." %>

Note that to trigger this fixture code, you'll need to `mrt reset` to clear your database. After resetting, don't forget to create a new account and log back in!

First, we created a couple of (completely fake) users, inserting them into the database and using their `id`s to select them out of the database afterwards. Then we added a comment for each user on the first post, linking the comment to the post (with `postId`), and the user (with `userId`). We also added a submission date and body to each comment, along with a denormalized field: the `authorName`.

### Displaying comments

It's all very well putting comments into the database, but we also need to show them on the discussion page. Hopefully this process should be fairly familiar to you by now, and you already know what's coming next!

```html
<template name="postPage">
  {{#with currentPost}}
    {{> postItem}}
    
    <ul class="comments">
      {{#each comments}}
        {{> comment}}
      {{/each}}
    </ul>
  {{/with}}
</template>
```
<%= caption "client/views/posts/post_page.html" %>

```js
Template.postPage.helpers({
  currentPost: function() {
    return Posts.findOne(Session.get('currentPostId'));
  },
  comments: function() {
    return Comments.find({postId: this._id});
  }
});
```
<%= caption "client/views/posts/post_page.js" %>

We've put the `{{#each comments}}` block inside the post template, so `this` is a post within the `comments` helper. To find the relevant comments, we check those that are linked to that post with the `postId` attribute.

Rendering a comment is pretty straightforward, given what we've learnt about helpers and handlebars. We'll create a new `comments` directory inside `views` to store all our comment stuff:

```html
<template name="comment">
  <li>
    <h4>
      <span class="author">{{author}}</span>
      <span class="date">on {{submittedText}}</span>
    </h4>
    <p>{{body}}</p>
  </li>
</template>
```
<%= caption "client/views/comments/comment.html" %>

Let's set up a quick template helper to format our `submitted` date in a human-readable format (unless you're one of those people who can understand UNIX timestamps and hexadecimal color codes fluently?)

```js
Template.comment.helpers({
  submittedText: function() {
    return new Date(this.submitted).toString();
  }
});
```
<%= caption "client/views/comments/comment.js" %>

Finally, we'll also show the number of comments on each post:

```html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        submitted by {{author}},
        <a href="{{postPagePath this}}">{{commentsCount}} comments</a>
        {{#if ownPost}}<a href="{{postEditPath this}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{postPagePath this}}" class="discuss btn">Discuss</a>
  </div>
</template>
```
<%= caption "client/views/posts/post_item.html" %>

And add the `commentsCount` helper to our `postItem` controller:

```js
Template.postItem.helpers({
  ownPost: function() {
    return this.userId == Meteor.userId();
  },
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  },
  commentsCount: function() {
    return Comments.find({postId: this._id}).count();
  }
});
```
<%= caption "client/views/posts/post_item.js" %>


<%= commit "10-2", "Display comments on `postPage`." %>

You should now be able to display our fixture comments and get something like this:

<%= screenshot "10-1", "Displaying comments" %>

### Submitting comments

Let's add a way for our users to create new comments. The process we'll follow will be pretty similar to how we've already allowed users to create new posts.

We'll start by adding a submit box at the bottom of each post:

```html
<template name="postPage">
  {{#with currentPost}}
    {{> postItem}}
    
    <ul class="comments">
      {{#each comments}}
        {{> comment}}
      {{/each}}
    </ul>
    
    {{#if currentUser}}
      {{> commentSubmit}}
    {{/if}}
  {{/with}}
</template>
```
<%= caption "client/views/posts/post_page.html" %>

And then create the comment form template:

```html
<template name="commentSubmit">
  <form name="comment" class="comment-form">
    <div class="control-group">
        <div class="controls">
            <label for="body">Comment on this post</label>
            <textarea name="body"></textarea>
        </div>
    </div>
    <div class="control-group">
        <div class="controls">
            <button type="submit" class="btn">Add Comment</button>
        </div>
    </div>
  </form>
</template>
```
<%= caption "client/views/comments/comment_submit.html" %>

<%= screenshot "10-2", "The comment submit form" %>

To submit our comments, we call a `comment` method in the `commentSubmit` controller, which works more or less the same way as our `postSubmit` controller.

```js
Template.commentSubmit.events({
  'submit form': function(event, template) {
    event.preventDefault();
    
    var comment = {
      body: $(event.target).find('[name=body]').val(),
      postId: template.data._id
    };
    
    Meteor.call('comment', comment, function(error, commentId) {
      error && throwError(error.reason);
    });
  }
});
```
<%= caption "client/views/comments/comment_submit.js" %>

Just like we had a `post` server-side method, we'll set up a `comment` Meteor method to create our comments, check that everything is legit, and finally insert the new comment into the comments collection.

```js
Comments = new Meteor.Collection('comments');

Meteor.methods({
  comment: function(commentAttributes) {
    var user = Meteor.user();
    var post = Posts.findOne(commentAttributes.postId);
    // ensure the user is logged in
    if (!user)
      throw new Meteor.Error(401, "You need to login to make comments");
      
    if (!commentAttributes.body)
      throw new Meteor.Error(422, 'Please write some content');
      
    if (!commentAttributes.postId)
      throw new Meteor.Error(422, 'You must comment on a post');
    
    comment = _.extend(_.pick(commentAttributes, 'postId', 'body'), {
      userId: user._id,
      author: user.username,
      submitted: new Date().getTime()
    });
    
    return Comments.insert(comment);
  }
});
```
<%= caption "collections/comments.js" %>

<%= commit "10-3", "Created a form to submit comments." %>

We're not doing anything too fancy. We'll simply check that the user is logged in, that the comment has a body, and that it's linked to a post. 


### Controlling the comments subscription

We're not quite done with comments though. 

As things stand, we are publishing all comments across all posts to all connected clients. As we've discussed previously, we should be using a publication to control exactly which comments are published. Soon, we'll use pagination to only display a certain subset of the posts on the screen at any one time. We should do something similar with the comments.

In fact, the only time we really need comments is when we are viewing a post and we need to read the discussion on that post. So at any one point, we really only want to subscribe to the comments on the post corresponding to the `currentPostId`.

This is pretty straightforward with a publication that takes _an argument_:

```js
Meteor.publish('comments', function(postId) {
  return Comments.find({postId: postId});
});
```
<%= caption "server/publications.js" %>

```js
Meteor.autorun(function() {
  Meteor.subscribe('comments', Session.get('currentPostId'));
});
```
<%= caption "client/main.js" %>

<%= commit "10-4", "Made a simple publication/subscription for comments." %>

The `Meteor.autorun()` block is our way of hooking into Meteor's reactivity: whenever `currentPostId` changes, the code will "auto-rerun", killing the old subscription, and resubscribing to `comments` again with a different argument.

So over time, as the user navigates the site, looking at different posts, the set of comments cached in the browser will change, depending on where the user is currently.

There's only one problem with doing this. When we return to the homepage, it claims all our posts have 0 comments:

>> SS

### Counting Comments

The reason for this should be reasonably clear -- we only ever have at most one of our post's comments loaded, so when we call `Comments.find({postId: this._id})` in the `commentsCount` helper in `post_item` controller, we find none. 

The best way to deal with this is to *denormalize* the number of comments onto the post (if you're not sure what that means, don't worry, the next sidebar has got you covered!). Although as we'll see, there's a minor addition of complexity in our code, the performance benefit we gain from not having to publish _all_ the comments to display the post list is worth it.

We'll achieve it by adding a `commentsCount` property to the `post` data structure. To begin with, we update our post fixtures (and `mrt reset` to reload them - don't forget to recreate your user account after!):

```js
var telescopeId = Posts.insert({
  title: 'Introducing Telescope',
  ..
  commentsCount: 2
});

Posts.insert({
  title: 'Meteor',
  ...
  commentsCount: 0
});

Posts.insert({
  title: 'The Meteor Book',
  ...
  commentsCount: 0
});
```
<%= caption "server/fixtures.js" %>

Then, we make sure that all new posts start with 0 comments:

```js
// pick out the whitelisted keys
var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {
  userId: user._id, 
  author: user.username, 
  submitted: new Date().getTime(),
  commentsCount: 0
});

var postId = Posts.insert(post);
```
<%= caption "collections/posts.js" %>

And then we update the relevant `commentsCount` when we make a new comment, using Mongo's `$inc` operator (which increments a numeric field by one):

```js
// update the post with the number of comments
Posts.update(comment.postId, {$inc: {commentsCount: 1}});

return Comments.insert(comment);
```
<%= caption "collections/comments.js "%>

Finally, we can just simply remove the `commentsCount` helper from `client/views/comments/comment.js`, as the field is now directly available on the comment.

Not too bad!

<%= commit "10-5", "Denormalized the number of comments into the post." %>












