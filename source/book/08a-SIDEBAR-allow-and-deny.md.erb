---
title: Data Security - allow and deny
complete: 100
date: 0008/01/02
number: s7
---

## SIDEBAR - Allow and Deny

Meteor's security system allows us to control database modification without having to define methods every time we want to make changes.

Although we saw that using a specific `post` method made a lot of sense when creating a post (as we needed to do auxilliary tasks like decorating the post with extra properties and taking special action when the post's URL had already been posted), we didn't really need to create new methods for updating and deleting posts. We just needed to check if the user had permission to do these actions, and thanks to `allow` and `deny` callbacks we were able to do so easily. 

Using these callbacks lets us be more declarative about database modifications, and say what kind of updates can be used. Of course, the fact that they wire up with the accounts system is an added bonus.

### Multiple callbacks

We can define as many `allow` callbacks as we like. We just need _at least one_ of them to return `true` for the given change that is happening. So when `Posts.insert` is called in a browser (whether it be from our app's client-side code or from the console), the server will in turn call whatever allowed-`insert` checks it can until it finds one that returns true. If it finds none, it will not allow the insert, and will return a `403` error to the client.

Similarly, we can define one or more `deny` callbacks. If _any_ of those callbacks return `true`, the change will be cancelled and a `403` will be returned. The logic of this means that for a successful `insert`, one or more `allow` `insert` callback will be executed, and _every_ `deny` `insert` callback will be executed.

<%= diagram "allow_deny", "Note: n/e stands for Not Executed" %>

In other words, Meteor moves down the callback list starting first with `deny`, then with `allow`, and executes every callback until one of them returns `true`. 

### Latency Compensation

Remember that database mutation methods (such as `.update()`) are latency compensated, just like any other method. So for instance, if you try to delete a post that does not belong to you via the browser console, you'll see the post briefly disappear as your local collection loses the document, but then re-appear as the server informs it that, no, in fact the document wasn't deleted.

Of course this behaviour is not a problem when triggered from the console (after all, if users are going to try and mess with data on the console, it's not really your problem what happens in _their_ browser). However, you need to make sure that this doesn't happen in your user interface. For instance, you need to take pains to ensure that you're not showing users delete buttons for documents that they're not allowed to delete.

Thankfully, since you can share permissions code between the client and server (for instance, you could write a library function `canDeletePost(user, post)` and put it in the shared `/lib` directory), doing so usually doesn't require too much extra code.

### Server-side permissions

The other thing to remember is that the permission system only applies to database mutations initiated from the client. On the server, Meteor assumes that _all_ operations are permitted.

This means that if you were to write a server-side `deletePost` Meteor method that could be called from the client, anybody would be able to delete any post. So you probably don't want to do that unless you checked user permissions within that method as well.

### Using deny as a callback

Finally, one trick you can do with `deny` is to use it as an "onX" callback. For instance, you could achieve a `lastModified` timestamp with the following code:

```js
Posts.deny({
  update: function(userId, doc) {
    doc.lastModified = +(new Date());
    return false;
  }
});
```

As `deny` callbacks are run for *every* sucessful `update`, we can rely on this callback being run. So we are able to make changes to the document in a structured way.

This technique admittedly feels like a bit of a hack, so you might want to just mediate updates via a method instead, but it's still useful to know. Hopefully in the future some kind of `beforeUpdate` callback will become available to us, so a category of simple methods will become redundant.